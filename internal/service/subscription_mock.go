// Code generated by MockGen. DO NOT EDIT.
// Source: internal\service\subscription.go
//
// Generated by this command:
//
//	mockgen -source internal\service\subscription.go -destination internal\service\subscription_mock.go -package service
//

// Package service is a generated GoMock package.
package service

import (
	repository "EffectiveMobile/internal/repository"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServicesRepository is a mock of ServicesRepository interface.
type MockServicesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServicesRepositoryMockRecorder
	isgomock struct{}
}

// MockServicesRepositoryMockRecorder is the mock recorder for MockServicesRepository.
type MockServicesRepositoryMockRecorder struct {
	mock *MockServicesRepository
}

// NewMockServicesRepository creates a new mock instance.
func NewMockServicesRepository(ctrl *gomock.Controller) *MockServicesRepository {
	mock := &MockServicesRepository{ctrl: ctrl}
	mock.recorder = &MockServicesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicesRepository) EXPECT() *MockServicesRepositoryMockRecorder {
	return m.recorder
}

// AddService mocks base method.
func (m *MockServicesRepository) AddService(ctx context.Context, name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddService", ctx, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddService indicates an expected call of AddService.
func (mr *MockServicesRepositoryMockRecorder) AddService(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddService", reflect.TypeOf((*MockServicesRepository)(nil).AddService), ctx, name)
}

// DeleteService mocks base method.
func (m *MockServicesRepository) DeleteService(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockServicesRepositoryMockRecorder) DeleteService(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockServicesRepository)(nil).DeleteService), ctx, id)
}

// GetOrCreateServiceID mocks base method.
func (m *MockServicesRepository) GetOrCreateServiceID(ctx context.Context, name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateServiceID", ctx, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateServiceID indicates an expected call of GetOrCreateServiceID.
func (mr *MockServicesRepositoryMockRecorder) GetOrCreateServiceID(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateServiceID", reflect.TypeOf((*MockServicesRepository)(nil).GetOrCreateServiceID), ctx, name)
}

// GetServiceID mocks base method.
func (m *MockServicesRepository) GetServiceID(ctx context.Context, name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceID", ctx, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceID indicates an expected call of GetServiceID.
func (mr *MockServicesRepositoryMockRecorder) GetServiceID(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceID", reflect.TypeOf((*MockServicesRepository)(nil).GetServiceID), ctx, name)
}

// GetServiceName mocks base method.
func (m *MockServicesRepository) GetServiceName(ctx context.Context, id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceName", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceName indicates an expected call of GetServiceName.
func (mr *MockServicesRepositoryMockRecorder) GetServiceName(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceName", reflect.TypeOf((*MockServicesRepository)(nil).GetServiceName), ctx, id)
}

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
	isgomock struct{}
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// CreateSubscription mocks base method.
func (m *MockSubscriptionRepository) CreateSubscription(ctx context.Context, p repository.CreateSubscriptionParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, p)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) CreateSubscription(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).CreateSubscription), ctx, p)
}

// DeleteSubscription mocks base method.
func (m *MockSubscriptionRepository) DeleteSubscription(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) DeleteSubscription(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).DeleteSubscription), ctx, id)
}

// GetSubscription mocks base method.
func (m *MockSubscriptionRepository) GetSubscription(ctx context.Context, id int64) (repository.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", ctx, id)
	ret0, _ := ret[0].(repository.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) GetSubscription(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetSubscription), ctx, id)
}

// ListSubscriptions mocks base method.
func (m *MockSubscriptionRepository) ListSubscriptions(ctx context.Context, p repository.ListSubscriptionsParams) ([]repository.Subscription, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptions", ctx, p)
	ret0, _ := ret[0].([]repository.Subscription)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSubscriptions indicates an expected call of ListSubscriptions.
func (mr *MockSubscriptionRepositoryMockRecorder) ListSubscriptions(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockSubscriptionRepository)(nil).ListSubscriptions), ctx, p)
}

// UpdateSubscription mocks base method.
func (m *MockSubscriptionRepository) UpdateSubscription(ctx context.Context, p repository.UpdateSubscriptionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockSubscriptionRepositoryMockRecorder) UpdateSubscription(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockSubscriptionRepository)(nil).UpdateSubscription), ctx, p)
}
