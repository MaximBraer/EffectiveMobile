// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Projects\GO\EffectiveMobile\internal\service\stats.go
//
// Generated by this command:
//
//	mockgen -source=D:\Projects\GO\EffectiveMobile\internal\service\stats.go -destination=D:\Projects\GO\EffectiveMobile\internal\service\stats_mock.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	repository "EffectiveMobile/internal/repository"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStatsRepository is a mock of StatsRepository interface.
type MockStatsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStatsRepositoryMockRecorder
	isgomock struct{}
}

// MockStatsRepositoryMockRecorder is the mock recorder for MockStatsRepository.
type MockStatsRepositoryMockRecorder struct {
	mock *MockStatsRepository
}

// NewMockStatsRepository creates a new mock instance.
func NewMockStatsRepository(ctrl *gomock.Controller) *MockStatsRepository {
	mock := &MockStatsRepository{ctrl: ctrl}
	mock.recorder = &MockStatsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsRepository) EXPECT() *MockStatsRepositoryMockRecorder {
	return m.recorder
}

// GetTotalCost mocks base method.
func (m *MockStatsRepository) GetTotalCost(ctx context.Context, p repository.GetTotalCostParams) (repository.TotalCostStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalCost", ctx, p)
	ret0, _ := ret[0].(repository.TotalCostStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalCost indicates an expected call of GetTotalCost.
func (mr *MockStatsRepositoryMockRecorder) GetTotalCost(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalCost", reflect.TypeOf((*MockStatsRepository)(nil).GetTotalCost), ctx, p)
}
