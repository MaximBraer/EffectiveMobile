// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	postgres "EffectiveMobile/internal/storage/postgres"
	context "context"

	mock "github.com/stretchr/testify/mock"

	slog "log/slog"
)

// SubscriptionStorage is an autogenerated mock type for the SubscriptionStorage type
type SubscriptionStorage struct {
	mock.Mock
}

// CreateSubscription provides a mock function with given fields: ctx, p, log
func (_m *SubscriptionStorage) CreateSubscription(ctx context.Context, p postgres.CreateSubscriptionParams, log *slog.Logger) (int64, error) {
	ret := _m.Called(ctx, p, log)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.CreateSubscriptionParams, *slog.Logger) (int64, error)); ok {
		return rf(ctx, p, log)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postgres.CreateSubscriptionParams, *slog.Logger) int64); ok {
		r0 = rf(ctx, p, log)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, postgres.CreateSubscriptionParams, *slog.Logger) error); ok {
		r1 = rf(ctx, p, log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrCreateServiceID provides a mock function with given fields: ctx, name
func (_m *SubscriptionStorage) GetOrCreateServiceID(ctx context.Context, name string) (int, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateServiceID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSubscriptionStorage creates a new instance of SubscriptionStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionStorage {
	mock := &SubscriptionStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
