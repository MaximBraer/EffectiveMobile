// Code generated by MockGen. DO NOT EDIT.
// Source: stats.go
//
// Generated by this command:
//
//	mockgen -destination=stats_mock.go -source=stats.go -package=handlers
//

// Package handlers is a generated GoMock package.
package handlers

import (
	repository "EffectiveMobile/internal/repository"
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStatsService is a mock of StatsService interface.
type MockStatsService struct {
	ctrl     *gomock.Controller
	recorder *MockStatsServiceMockRecorder
	isgomock struct{}
}

// MockStatsServiceMockRecorder is the mock recorder for MockStatsService.
type MockStatsServiceMockRecorder struct {
	mock *MockStatsService
}

// NewMockStatsService creates a new mock instance.
func NewMockStatsService(ctrl *gomock.Controller) *MockStatsService {
	mock := &MockStatsService{ctrl: ctrl}
	mock.recorder = &MockStatsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsService) EXPECT() *MockStatsServiceMockRecorder {
	return m.recorder
}

// FormatDate mocks base method.
func (m *MockStatsService) FormatDate(date *time.Time) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatDate", date)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatDate indicates an expected call of FormatDate.
func (mr *MockStatsServiceMockRecorder) FormatDate(date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatDate", reflect.TypeOf((*MockStatsService)(nil).FormatDate), date)
}

// FormatUUID mocks base method.
func (m *MockStatsService) FormatUUID(arg0 *uuid.UUID) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatUUID", arg0)
	ret0, _ := ret[0].(*string)
	return ret0
}

// FormatUUID indicates an expected call of FormatUUID.
func (mr *MockStatsServiceMockRecorder) FormatUUID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatUUID", reflect.TypeOf((*MockStatsService)(nil).FormatUUID), arg0)
}

// GetTotalCost mocks base method.
func (m *MockStatsService) GetTotalCost(ctx context.Context, userID *uuid.UUID, serviceName *string, startDate, endDate *time.Time) (*repository.TotalCostStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalCost", ctx, userID, serviceName, startDate, endDate)
	ret0, _ := ret[0].(*repository.TotalCostStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalCost indicates an expected call of GetTotalCost.
func (mr *MockStatsServiceMockRecorder) GetTotalCost(ctx, userID, serviceName, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalCost", reflect.TypeOf((*MockStatsService)(nil).GetTotalCost), ctx, userID, serviceName, startDate, endDate)
}

// ParseMonth mocks base method.
func (m *MockStatsService) ParseMonth(s string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseMonth", s)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseMonth indicates an expected call of ParseMonth.
func (mr *MockStatsServiceMockRecorder) ParseMonth(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseMonth", reflect.TypeOf((*MockStatsService)(nil).ParseMonth), s)
}
